type Column{
    title: String! @UI (
        default: "Title"
        name: "Name"
    )

    content: Any @UI (
        name: "Content"
    )

    width: Number @UI (
        name: "Width"
        default: "100"
    )

    format: String @UI (
        name: "Formatting"
        heading: "Specify how data in this column should be formatted. User documentation will include formats to choose from."
    )

    alignment: String @UI (
        name: "Header Alignment"
        default: "left"
    )

    editable: Boolean @UI (
        default: false
        name: "Editable"
    )

    headerFilter: Boolean @UI (
        default: true
        name: "Header Filter"
    )

    columnSorter: Boolean @UI (
        default: true
        name: "Column Sorter"
    )

    resizable: Boolean @UI (
        default: false
        name: "Resizable"
    )

    frozen: Boolean @UI (
        default: false
        name: "Frozen"
    )
}

type SubGroup {
    title: String! @UI (
        name: "Title"
        heading: "The title of this sub group."
    )

    columns: [Column] @UI (
        name: "Columns"
        heading: "The columns that belong to this sub group."
    )
}

type Group{
    title: String! @UI (
        name: "Group Title"
        heading: "The title of this group."
    )

    columns: [Column] @UI (
        name: "Columns"
        heading: "The columns that belong to this group."
    )

    subGroups: [SubGroup] @UI (
        name: "Sub Groups"
        heading: "The sub groups within this group."
    )
}
 
type data { 
    rows: [row!]! @UI (
        name: "Row"
        heading: "The rows of data that will be displayed in the data grid."
    )

    editable: String @UI (
        name: "Editable"
        heading: "Enable in-line editing."
    )

    resizable: String @UI (
        name: "Resizable"
    )

    theme: String @UI (
        name: "Theme"
        heading: "Apply a pre-made theme to the data grid." // check if can grab the tabulator css style from html
    )

    textWrap: Boolean @UI (
        default: False
        name: "Wrap Text"
        heading: "Enable to wrap long text in cells. If disabled, text will be truncated."
    )

    headerFiltering: Boolean @UI (
        default: False
        name: "Header Filtering"
        heading: "Enable header filtering."
    )

    columnSorting: Boolean @UI (
        default: False
        name: "Column Sorting"
        heading: "Enable column sorting. Allows you to sort columns in ascending or descending order."
    )
} 
 
type row implements MooDElement { 
    columns: [Column] @UI (
        name: "Columns"
        heading: "The columns for this row."
    )

    columnGroups: [ColumnGroup] @UI ( // change to subcolumns
        name: "Column Groups"
        heading: "The column groups for this row."
    )

    // removed groupRows (if groupBy is null, then should be disabled - 
    // however, groupBy can also be null if row doesn't have an item assigned in pick list
    // solution: if selected a pick list or value from repo in groupBy, assume enabled, else disabled. If null, place under Other.
    // how can we detect if we've selected a pick list/value, we can only check the returned value from that pick list?
    //)
    groupRows: Boolean @UI (
        name: "Enable Row Grouping"
        heading: "Group rows based on a specific column or criteria."
    )

    groupBy: Any @UI (
        name: "Group Rows By"
    )
}
